@page "/groups"
@inject IGetGroupsUseCase _getGroupsUseCase
@inject IAddGroupUseCase _addGroupUseCase
@inject IDeleteGroupUseCase _deleteGroupUseCase
@inject ModalService _modalService
@inject MessageService _message
@inject IValidator<GroupLineItemViewModel> _groupValidator

<Row Justify="center" Style="flex-grow: 1;height: 100%;">
	<GridCol Span="20">
		<Space Direction="DirectionVHType.Vertical" Style="width: 100%;">
			<SpaceItem>
				<Form @ref="_viewModel.Form"
					  Model="@_viewModel.GroupToAdd"
					  Layout="@FormLayout.Inline"
					  OnFinish="OnValidateSubmit">
					<Validator>
						<FluentValidator />
					</Validator>
					<ChildContent>
						<FormItem>
							<Input @bind-Value="@context.DisplayName" />
						</FormItem>
						<FormItem>
							<Input @bind-Value="@context.ShortName" />
						</FormItem>
						<FormItem>
							<Button Loading="@_isProcessing" Type="@ButtonType.Primary" HtmlType="submit">新建</Button>
						</FormItem>
					</ChildContent>
				</Form>
			</SpaceItem>
			<SpaceItem>
				<Spin Spinning="_isLoading">
					<Table TItem="GroupLineItemViewModel" DataSource="@_viewModel.Groups">
						<Column @bind-Field="@context.DisplayName" Filterable />
						<Column @bind-Field="@context.ShortName" Filterable />
						<ActionColumn Title="操作">
							<Space>
								<SpaceItem>
									<Button OnClick="() => EditGroup(context)">编辑</Button>
								</SpaceItem>
								<SpaceItem>
									<Button OnClick="() => DeleteGroup(context)" Danger>删除</Button>
								</SpaceItem>
							</Space>
						</ActionColumn>
					</Table>
				</Spin>
			</SpaceItem>
		</Space>
	</GridCol>
</Row>


@code {

	/// <summary>
	///     Indicates whether the table is loading.
	/// </summary>
	private bool _isLoading;

	/// <summary>
	///     Indicates whether the adding action is processing
	/// </summary>
	private bool _isProcessing;

	/// <summary>
	///     ViewModel of the component.
	/// </summary>
	private readonly GroupPageViewModel _viewModel = new();

	/// <summary>
	///     Initialize ViewModel.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		_isLoading = true;
		await base.OnInitializedAsync();

		_viewModel.Groups = (await _getGroupsUseCase.Execute())?.Select(x =>
			new GroupLineItemViewModel
			{
				Id = x.Id ?? default(int),
				DisplayName = x.DisplayName,
				ShortName = x.ShortName
			})
			.ToList();

		_isLoading = false;
	}

	/// <summary>
	///     Add group to database and update UI.
	/// </summary>
	private async Task OnValidateSubmit(EditContext editContext)
	{
		// bug: MustAsync not trigger on first submit, validate manually

		_isProcessing = true;
		StateHasChanged();

		if ((await _groupValidator.ValidateAsync((GroupLineItemViewModel)editContext.Model)).IsValid)
		{
			var vm = (GroupLineItemViewModel)editContext.Model;
			var group = await _addGroupUseCase.Execute(vm.DisplayName, vm.ShortName);

			if (group != null)
			{
				_viewModel.Groups.Add(new GroupLineItemViewModel { Id = group.Id, DisplayName = group.DisplayName, ShortName = group.ShortName });
				await _message.Success("创建成功");
			}
		}

		_isProcessing = false;
	}

	/// <summary>
	///     Delete group from database and update UI.
	/// </summary>
	private async Task EditGroup(GroupLineItemViewModel context)
	{
		if (context.Id != null)
		{
			var modalRef = await _modalService.CreateModalAsync<EditGroupModal, GroupLineItemViewModel, GroupLineItemViewModel>(
				new ModalOptions
				{
					Title = "编辑",
					MaskClosable = false
				}, context);

			modalRef.OnOk = result =>
			{
				context.DisplayName = result.DisplayName;
				context.ShortName = result.ShortName;
				StateHasChanged();
				return Task.CompletedTask;
			};
		}
	}

	/// <summary>
	///     Delete group from database and update UI.
	/// </summary>
	private async Task DeleteGroup(GroupLineItemViewModel context)
	{
		if (context.Id != null)
		{
			if (await _deleteGroupUseCase.Execute((int)context.Id))
			{
				_isLoading = true;
				StateHasChanged();
				_viewModel.Groups.Remove(context);

				_isLoading = false;
				await _message.Success("删除成功");
			}
		}
	}

}