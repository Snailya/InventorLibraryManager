@page "/families"
@inject IGetLibrariesUseCase _getLibrariesUseCase
@inject IGetFamiliesUseCase _getFamiliesUseCase
@inject IAddFamilyUseCase _addFamilyUseCase
@inject MessageService _message
@inject ModalService _modalService
@inject DrawerService _drawerService

<Row Justify="center" Style="flex-grow: 1;height: 100%;">
	<GridCol Span="20">
		<Space Direction="DirectionVHType.Vertical" Style="width: 100%;">
			<SpaceItem>
				<Space>
					<SpaceItem>
						<Text Style="padding-left: 8px;">库视图：</Text>
					</SpaceItem>
					<SpaceItem>
						<Select TItem="LibraryOptionViewModel" TItemValue="string"
								Style="min-width: 128px;"
								DataSource="@_viewModel.Libraries"
								OnSelectedItemChanged="@OnSelectedLibraryChanged"
								LabelName="@nameof(LibraryOptionViewModel.Name)"
								ValueName="@nameof(LibraryOptionViewModel.Id)">
						</Select>
					</SpaceItem>
				</Space>
			</SpaceItem>
			<SpaceItem>
				<Spin Size="large" Spinning="_isLoading" Style="display: flex; height: 100%; width: 100%; align-items: center; justify-content: center;">
					<Table TItem="FamilyLineItemViewModel" DataSource="@(_viewModel.Families)"
						   Size="@TableSize.Small">
						<Column @bind-Field="@context.Library">@context.Library.Name</Column>
						<Column TData="string" @bind-Field="@context.Name" Filterable />
						<Column @bind-Field="@context.Description" Ellipsis />
						<Column @bind-Field="@context.Group">
							@if (!context.Library.ReadOnly)
							{
								@context.Group?.DisplayName
							}
						</Column>
						<ActionColumn Title="操作" Width="256">
							<Space>
								<SpaceItem>
									<Button OnClick="() => ViewFamilyDetail(context)" Disabled="@(context.Library.ReadOnly || context.Group == null)">详情</Button>
								</SpaceItem>
								<SpaceItem>
									<Button OnClick="() => AssignGroup(context)" Disabled="@(context.Library.ReadOnly)">指派</Button>
								</SpaceItem>
								<SpaceItem>
									<DropdownButton Trigger="@(new[] { TriggerType.Click })" Icon="down">
										<Overlay>
											<AntDesign.Menu>
												@foreach (var library in _viewModel.Libraries)
												{
													<AntDesign.MenuItem>
														<Button Type="@ButtonType.Link"
																OnClick="() => CopyOrMoveFamilyTo(context, library)"
																Disabled="@(library.ReadOnly || library == context.Library || string.IsNullOrEmpty(library.Id))">
															@library.Name
														</Button>
													</AntDesign.MenuItem>
												}
											</AntDesign.Menu>
										</Overlay>
										<Unbound Context="dropdown">
											移动至
										</Unbound>
									</DropdownButton>
								</SpaceItem>
							</Space>
						</ActionColumn>
					</Table>
				</Spin>
			</SpaceItem>
		</Space>
	</GridCol>
</Row>


@code {

		/// <summary>
		///     Indicates whether the table is loading.
		/// </summary>
		private bool _isLoading;

		/// <summary>
		///     ViewModel of the page.
		/// </summary>
		private readonly FamilyPageViewModel _viewModel = new();

		/// <summary>
		///     Initialize ViewModel.
		/// </summary>
		protected override async Task OnInitializedAsync()
		{
			_viewModel.Libraries.AddRange(
				(await _getLibrariesUseCase.Execute())
					.Select(x => new LibraryOptionViewModel
					{
						Id = x.LibraryInternalName,
						Name = x.DisplayName,
						ReadOnly = x.ReadOnly
					}));

			await ReloadFamilies();

			await base.OnInitializedAsync();
		}

		/// <summary>
		///     prompt a select box to let use chose  from database and update UI.
		/// </summary>
		private async Task CopyOrMoveFamilyTo(FamilyLineItemViewModel context, LibraryOptionViewModel library)
		{
			var family = await _addFamilyUseCase.Execute(context.Id, context.Library.Id, library.Id);
			context.DatabaseId = family.Id;
			context.Library = _viewModel.Libraries.Single(y => y.Id == family.LibraryInternalName);
			StateHasChanged();
		}

		private async Task ReloadFamilies(string libraryId = "")
		{
			_isLoading = true;
			StateHasChanged();

			_viewModel.Families = (await _getFamiliesUseCase.Execute(libraryId)).Select(x => new FamilyLineItemViewModel
			{
				DatabaseId = x.Id,
				Description = x.Description,
				Group = x.Group != null ? new GroupLineItemViewModel
				{
					DisplayName = x.Group.DisplayName,
					Id = x.Group.Id,
					ShortName = x.Group.ShortName
				} : null,
				Id = x.FamilyInternalName,
				Library = _viewModel.Libraries.Single(y => y.Id == x.LibraryInternalName),
				Name = x.DisplayName
			}).ToList();

		// initil

		_isLoading = false;
	}

	private async Task AssignGroup(FamilyLineItemViewModel context)
	{
		var modalRef = await _modalService.CreateModalAsync<AssignGroupSelect, FamilyLineItemViewModel, FamilyLineItemViewModel>(
			new ModalOptions
			{
				Title = "指派分组",
				MaskClosable = false
			}, context);

		modalRef.OnOk = result =>
		{
			StateHasChanged();
			return Task.CompletedTask;
		};
	}

	private async void OnSelectedLibraryChanged(LibraryOptionViewModel obj)
	{
		await ReloadFamilies(obj.Id);
		StateHasChanged();
	}

	private async Task ViewFamilyDetail(FamilyLineItemViewModel context)
	{
		await _drawerService.CreateDialogAsync<FamilyDetailDrawer, FamilyLineItemViewModel, FamilyLineItemViewModel>(
			new DrawerOptions { Title = "详情", Width = 800 }, context);
	}

}